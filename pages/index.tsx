import type { NextPage } from 'next'
import Head from 'next/head'
import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'
import { useEffect } from 'react'
import { useAddressSearchStore, useStore } from '../store'
import Map from '../components/Map'
import AddressSearch from '../components/AddressSearch'
import MapIcon from '../svg/MapIcon'
import SideBar from '../components/SideBar'
import { useGetUserLocation } from '../hooks/useGetUserLocation'
import { SearchLocation } from '../constants/types'
import { trpc } from '../utils/trpc'
import Login from '../svg/Login'
import Lines from '../svg/Lines'
import CatFace from '../svg/CatFace'

const Home: NextPage = ({}) => {
  const lnglat = useGetUserLocation()
  const showMobileMap = useStore((state) => state.showMobileMap)
  const setShowMobileMap = useStore((state) => state.setShowMobileMap)
  const { setSearchLocationState, searchLocationState } = useAddressSearchStore(
    (state) => state
  )
  const { data } = trpc.searchByLngLat.useQuery(lnglat, {
    enabled: !!lnglat,
  })

  useEffect(() => {
    if (lnglat && data) {
      const location: SearchLocation = {
        feature_id: data.feature_id,
        lnglat,
        address: data.address,
      }
      setSearchLocationState(location)
    }
  }, [setSearchLocationState, data, lnglat])

  return (
    <>
      <Head>
        <title>City Cats of NYC</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1 user-scalable=no"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative h-screen w-screen overflow-hidden">
        <nav className="flex h-[70px] w-full items-center justify-between gap-4 border-b-[.5px] border-solid border-[rgba(0,0,0,.2)] bg-white p-4 md:h-20 md:gap-14 md:p-6">
          <h1 className="font-baloo text-lg font-bold leading-none text-primaryGold md:text-2xl">
            Bodega <br /> Cats
            <span className="font-baloo text-xs font-bold italic leading-none text-graphite md:text-sm">
              of nyc
            </span>
          </h1>
          <AddressSearch />
          <button className="rounded-[10px] bg-[#f5f4f1] p-3">
            <Login />
          </button>
        </nav>

        <div className="relative flex h-container flex-row">
          <div className="flex w-full justify-center md:w-map-container">
            {searchLocationState.lnglat && <Map {...searchLocationState} />}{' '}
            {!searchLocationState.lnglat && (
              <CatFace
                classNames={`self-center mt-6 animate-bounce static z-10`}
              />
            )}
          </div>
          <SideBar />
          <button
            className={`absolute bottom-20 right-10 z-20 block rounded-full ${
              false ? 'bg-dark-blue-radial-gradient' : 'bg-graphite'
            }  b p-4 text-white md:hidden`}
            onClick={() => setShowMobileMap(!showMobileMap)}
          >
            {showMobileMap && <MapIcon />}
            {!showMobileMap && <Lines />}
          </button>
        </div>
      </main>

      <footer></footer>
    </>
  )
}

export default Home

//const [_, setAuth] = useState(false)
//const user = useUser()
//const { supabaseClient } = useSessionContext()
//const authState = useStore((state) => state.authState)
